package HousingData;

import org.junit.Test;

import java.util.Arrays;

import static HousingData.Main.analyzeHomeData;

public class Tests {
    private static final String DELIMITER = " ";

    /**
     *  Trivial tests
     */

    @Test
    public void trivalDataTest1() {
        String trivalPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/random_1N_1K.txt";
        long[] trivalOutput = analyzeHomeData(trivalPath, DELIMITER).output;
        long[] trivalAnswer = { 0 };
        assert Arrays.equals(trivalOutput, trivalAnswer);
    }

    @Test
    public void trivalDataTest2() {
        String trivalPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/random_10N_1K.txt";
        long[] trivalOutput = analyzeHomeData(trivalPath, DELIMITER).output;
        for(long element: trivalOutput) {
            assert element == 0;
        }
        assert trivalOutput.length == 10;
    }

    @Test
    public void nEqualsKDataTest() {
        String nEqualsKPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/n_equals_k.txt";
        long[] nEqualsK = analyzeHomeData(nEqualsKPath, DELIMITER).output;
        for(long element: nEqualsK) {
            assert element == 10;
        }
    }

    /**
     * Base patterns
     */

    @Test
    public void increasingDataTest() {
        String increasingPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/increasing.txt";
        long[] increasing = analyzeHomeData(increasingPath, DELIMITER).output;
        for(long element: increasing) {
            assert element == 10;
        }
    }

    @Test
    public void decreasingDataTest() {
        String decreasingPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/decreasing.txt";
        long[] decreasing = analyzeHomeData(decreasingPath, DELIMITER).output;
        for(long element: decreasing) {
            assert element == -10;
        }
    }

    @Test
    public void stagnantDataTest() {
        String stagnantPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/stagnant.txt";
        long[] stagnant = analyzeHomeData(stagnantPath, DELIMITER).output;
        for(long element: stagnant) {
            assert element == 0;
        }
    }

    /**
     * Increasing and decreasing intervals should cancel out
     */

    @Test
    public void cancelingDataTest1() {
        String cancelingPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/canceling1.txt";
        long[] canceling = analyzeHomeData(cancelingPath, DELIMITER).output;
        for(long element: canceling) {
            assert element == 0;
        }
    }

    @Test
    public void cancelingDataTest2() {
        String cancelingPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/canceling2.txt";
        long[] canceling = analyzeHomeData(cancelingPath, DELIMITER).output;
        for(long element: canceling) {
            assert element == 0;
        }
    }

    /**
     * Periodic data
     */

    @Test
    public void changingDataTest1() {
        String changingPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/changing1.txt";
        long[] changing = analyzeHomeData(changingPath, DELIMITER).output;
        long value = 1;
        for(long element: changing) {
            assert element == value;
            value *= -1;
        }
    }

    @Test
    public void changingDataTest2() {
        String changingPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/changing2.txt";
        long[] changing = analyzeHomeData(changingPath, DELIMITER).output;
        long[] changingAnswer = { 1, -1, 0, 1, -1, 0, 1, -1, 0, 1 };
        assert Arrays.equals(changing, changingAnswer);
    }

    /**
     * Simple housing trend data
     */

    @Test
    public void sampleDataTest() {
        String samplePath = "/Users/pbezuhov/git/misc/java_algorithm/testData/sample.txt";
        long[] sampleOutput = analyzeHomeData(samplePath, DELIMITER).output;
        long[] sampleAnswer = { 3, 0, -1 };
        assert Arrays.equals(sampleOutput, sampleAnswer);
    }

    @Test
    public void upAndDownTest() {
        String upAndDownPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/up_and_down.txt";
        long[] upAndDown = analyzeHomeData(upAndDownPath, DELIMITER).output;
        long[] upAndDownAnswer = { 3, 3, 0, -3, -3 };
        assert Arrays.equals(upAndDown, upAndDownAnswer);
    }

    @Test
    public void downAndUpTest() {
        String downAndUpPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/down_and_up.txt";
        long[] downAndUp = analyzeHomeData(downAndUpPath, DELIMITER).output;
        long[] downAndUpAnswer = { -3, -3, 0, 3, 3 };
        assert Arrays.equals(downAndUp, downAndUpAnswer);
    }

    /**
     * Test cases generated by random numbers
     */

    @Test
    public void randomDataTest1() {
        String randomPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/random1.txt";
        long[] random = analyzeHomeData(randomPath, DELIMITER).output;
        long[] randomAnswer = { -2, -2, -1, 1 };
        assert Arrays.equals(random, randomAnswer);
    }

    @Test
    public void randomDataTest2() {
        String randomPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/random2.txt";
        long[] random = analyzeHomeData(randomPath, DELIMITER).output;
        long[] randomAnswer = { -1, 1, 1, -1, 1, 1 };
        assert Arrays.equals(random, randomAnswer);
    }

    @Test
    public void randomDataTest3() {
        String randomPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/random3.txt";
        long[] random = analyzeHomeData(randomPath, DELIMITER).output;
        long[] randomAnswer = { 1, -1, -2 };
        assert Arrays.equals(random, randomAnswer);
    }

    /**
     * Custom test cases
     */

    @Test
    public void customDataTest1() {
        String customPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/custom1.txt";
        long[] custom = analyzeHomeData(customPath, DELIMITER).output;
        long[] customAnswer = { 0, 1, 1, 0, 1, 3, 0, -1 };
        assert Arrays.equals(custom, customAnswer);
    }

    @Test
    public void customDataTest2() {
        String customPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/custom2.txt";
        long[] custom = analyzeHomeData(customPath, DELIMITER).output;
        long[] customAnswer = { 0, -1, -1, 0, 1, 0, 0, 1 };
        assert Arrays.equals(custom, customAnswer);
    }

    @Test
    public void customDataTest3() {
        String customPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/custom3.txt";
        long[] custom = analyzeHomeData(customPath, DELIMITER).output;
        long[] customAnswer = { 19, 14, 12, 12, 14, 19, 14, 12, 12, 14, 19 };
        assert Arrays.equals(custom, customAnswer);
    }

    @Test
    public void customDataTest4() {
        String customPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/custom4.txt";
        long[] custom = analyzeHomeData(customPath, DELIMITER).output;
        long[] customAnswer = { -19, -14, -12, -12, -14, -19, -14, -12, -12, -14, -19 };
        assert Arrays.equals(custom, customAnswer);
    }

    /**
     * Java acts strangely when it interacts with large numbers.  These cases test if the numbers are too big for Java.
     */

    @Test
    public void bigNKDataTest1() {
        String bigPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/big_nk1.txt";
        long[] big = analyzeHomeData(bigPath, DELIMITER).output;
        long[] bigAnswer = { 19999900000L };
        assert Arrays.equals(big, bigAnswer);
    }

    @Test
    public void bigNKDataTest2() {
        String bigPath = "/Users/pbezuhov/git/misc/java_algorithm/testData/big_nk2.txt";
        long[] big = analyzeHomeData(bigPath, DELIMITER).output;
        long[] bigAnswer = { 19999700001L, 19999700001L };
        assert Arrays.equals(big, bigAnswer);
    }
}
